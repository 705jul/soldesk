Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  VPC0:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: Seoul-VPC0
  InternetGateway0:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW0
          
  InternetGatewayAttachment0:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway0
      VpcId: !Ref VPC0
            
  RouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0
      Tags:
        - Key: Name
          Value: AWS-PublicRT0
          
  DefaultRoute0:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment0
    Properties:
      RouteTableId: !Ref RouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway0

  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 10.1.1.0/24
      Tags:
        - Key: Name
          Value: AWS-VPC0-Subnet0
          
  Subnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable0
      SubnetId: !Ref Subnet0
 
  Subnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 10.1.2.0/24
      Tags:
        - Key: Name
          Value: AWS-VPC0-Subnet01          
  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable0
      SubnetId: !Ref Subnet01
      
  RouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0
      Tags:
        - Key: Name
          Value: AWS-PrivateRT01
                   
  Subnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: AWS-VPC0-Subnet02
          
  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable01
      SubnetId: !Ref Subnet02
      
  NATRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment0
    Properties:
      RouteTableId: !Ref RouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref Instance1ENIEth0
      
  RouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0
      Tags:
        - Key: Name
          Value: AWS-PrivateRT02  

  Subnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: AWS-VPC0-Subnet03
          
  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable02
      SubnetId: !Ref Subnet03

  NATRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment0
    Properties:
      RouteTableId: !Ref RouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref Instance2ENIEth0
      
  Subnet04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: AWS-tgw-Subnet04
          
  Subnet04RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable01
      SubnetId: !Ref Subnet04
      
  Subnet05:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: AWS-tgw-Subnet05
          
  Subnet05RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable02
      SubnetId: !Ref Subnet05      
 
  Instance1ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet0
      Description: Instance1 eth0
      GroupSet: 
        - !Ref SG1
      PrivateIpAddress: 10.1.1.100
      Tags:
        - Key: Name
          Value: NAT-Instance eth0
          
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC0
      
  VPCAssociateEIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref Instance1ENIEth0
      
  Instance2ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref Subnet01
      Description: Instance2 eth0
      GroupSet: 
        - !Ref SG1
      PrivateIpAddress: 10.1.2.100
      Tags:
        - Key: Name
          Value: NAT-Instance2 eth0
          
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc0
      
  VPCAssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      NetworkInterfaceId: !Ref Instance2ENIEth0
      
  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC0
      GroupDescription: VPC0-NATInstance-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC0-NATInstance-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        
      
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00550ccc38e992b78
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Instance1ENIEth0
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance
          yum -y install tcpdump iptraf

  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00550ccc38e992b78
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Instance2ENIEth0
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostname NAT-Instance
          yum -y install tcpdump iptraf
          
  Instance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Private-EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet02
          GroupSet:
          - !Ref SG1
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Private-EC2-1
          yum update -y
          yum install httpd -y
          systemctl start httpd
          echo "<h1>Test Web Server 1</h1>" > /var/www/html/index.html  

  Instance4:
    Type: AWS::EC2::Instance
    # DependsOn: Instance1
    Properties:
      ImageId: ami-0e4a9ad2eb120e054
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Private-EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet03
          GroupSet:
          - !Ref SG1
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          (
          echo "qwe123"
          echo "qwe123"
          ) | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname Private-EC2-2
          yum update -y
          yum install httpd -y
          systemctl start httpd
          echo "<h1>Test Web Server 2</h1>" > /var/www/html/index.html   

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC0
      Targets:
        - Id: !Ref Instance3
          Port: 80
        - Id: !Ref Instance4
          Port: 80

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SG1
      Subnets:
        - !Ref Subnet0
        - !Ref Subnet01    

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP        